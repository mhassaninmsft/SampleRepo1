name: 'deploy Terraform'
description: 'deploy Terraform '
inputs:
  # ARM_CLIENT_ID:  # id of input
  #   description: 'Who to greet'
  #   required: true
  #   default: 'World'
  # ARM_CLIENT_SECRET:  # id of input
  #   description: 'Who to greet'
  #   required: true
  #   default: 'World'
  # ARM_SUBSCRIPTION_ID:  # id of input
  #   description: 'Who to greet'
  #   required: true
  #   default: 'World'
  # ARM_TENANT_ID:  # id of input
  #   description: 'Who to greet'
  #   required: true
  #   default: 'World'
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  TFVARS_CONTENT:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  GITHUB_TOKEN:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  # working-directory: ./deploy/terraform
  using: "composite"
  steps:
    - run: echo Hello ${{ inputs.who-to-greet }}.
      shell: bash
    - id: random-number-generator
      run: echo "::set-output name=random-number::$(echo $RANDOM)"
      shell: bash
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    - run: pwd
      shell: bash
    - run: ls -la
      shell: bash
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
      #   # terraform_version: 0.13.0:
      #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - id: Download-file
      shell: bash
      working-directory: ./deploy/terraform
      run: |
        ls -la
        pwd
        touch backend.tfvars
        printf "${{ inputs.TFVARS_CONTENT }}\n" >>  backend.tfvars
        printf "\n" >>backend.tfvars
        cat backend.tfvars

    - name: Terraform Format
      shell: bash
      working-directory: ./deploy/terraform
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      shell: bash
      working-directory: ./deploy/terraform
      id: init
      run: terraform init --backend-config=backend.tfvars

    # - name: Composite Action 1
    #   uses: ./actions/greet
    #   # uses: mhassaninmsft/SampleRepo1@v1
    #   with:
    #     who-to-greet: 'Mohamed'

    - name: Terraform Validate
      shell: bash
      working-directory: ./deploy/terraform
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      shell: bash
      working-directory: ./deploy/terraform
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      shell: bash
      working-directory: ./deploy/terraform
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      shell: bash
      working-directory: ./deploy/terraform
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false